---
import type { GetStaticPaths } from "astro";
import type { PokemonListResponse } from '@interfaces/pokemon-list.response';

import MainLayout from "../../layouts/MainLayout.astro";
import PokemonCard from "@components/pokemons/PokemonCard.astro";
import Title from "@components/shared/title.astro";

import {Icon} from 'astro-icon/components'

export const getStaticPaths = ( async () => {

    const resp = await fetch('https://pokeapi.co/api/v2/pokemon?limit=151');
    const {results} = (await resp.json()) as PokemonListResponse;

    
    return results.map(({name, url}) => ({
        params: {name: name},
        props: {name: name, url: url},
    }));

    /* 
    return [
        {params: {name: 'bulbasaur'}, props: {name: 'bulbasaur', url: 'https://pokeapi.co/api/v2/pokemon/1/'}},
        {params: {name: 'charmander'}, props: {name: 'bulbasaur', url: 'https://pokeapi.co/api/v2/pokemon/1/'}}
    ];
    */    
   
}) satisfies GetStaticPaths;

const {name} = Astro.params;
const {url} = Astro.props;

const id = url.split('/').at(-2);
const audiosrc = `https://raw.githubusercontent.com/PokeAPI/cries/main/cries/pokemon/latest/${id}.ogg`;
const imgSrc = `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/other/official-artwork/${id}.png`

---

<MainLayout 
    title={`pokemon - #${id} ${name}`}
    description={`informacion sobre el pokemon ${name}`}
    image={imgSrc}
>
    <section class="mt-10 mx-10 flex-col justify-center items-center">
        <div class="flex flex-row">
            <div>
                <button onclick="history.back()" class="text-blue-500">Regresar</button>
                <Title>{name}</Title>
            </div>
    
            <button id="btn-favorite" class="ml-4" data-name={name} data-id={id}>
                <Icon data-outline name="heart-outline" size={50} />
                <Icon data-full class="hidden" name="heart-full" size={50}/>
            </button>
        </div>
        

        <PokemonCard 
            name={name}
            url={url}
            isBig={true}
        />

        <audio controls class="mt-5">
            <source src={audiosrc} type="audio/ogg">
        </audio>
    </section>

</MainLayout>

<script>
    interface FavoritesPokemon{
        name: string,
        id: number,
    }

    /*
    document.addEventListener('astro:before-preparation', () =>{
        console.log('astro:before-preparation');
    })

    document.addEventListener('astro:after-preparation', () =>{
        console.log('astro:after-preparation');
    })

    document.addEventListener('astro:before-swap', () =>{
        console.log('astro:before-swap');
    })

    document.addEventListener('astro:after-swap', () =>{
        console.log('astro:after-swap');
    })

    document.addEventListener('astro:page-load', () => {
        console.log('hola');
    }, {once:true})
    */

   const handlePageLoad = () => {

        let favoritePokemons: FavoritesPokemon[] = JSON.parse(
            localStorage.getItem('favorites') ?? '[]'
        );

        const btnFavorite = document.querySelector(
            '#btn-favorite'
        ) as HTMLButtonElement;

        if(!btnFavorite) return;

        const name = btnFavorite.dataset.name ?? '';
        const id = btnFavorite.dataset.id ?? '';
        const isFavorite = favoritePokemons.some((fav) => fav.name === name)

        const heartOutline = btnFavorite.querySelector('[data-outline]') as HTMLElement;
        const heartFull = btnFavorite.querySelector('[data-full]') as HTMLElement;

        //hagan la funcion para mostrar o ocultar el corazon
        if(isFavorite){
            heartOutline.classList.add('hidden');
            heartFull.classList.remove('hidden');
        }


        const toggleFavorite = () => {
            const isFavorite = favoritePokemons.some((fav) => fav.name === name)

            if(isFavorite) {
                //remover
                favoritePokemons = favoritePokemons.filter((fav) => fav.name === name)
            }else{
                //agregar
                favoritePokemons.push({
                    id: +id,
                    name: name
                })
            }

            localStorage.setItem('favorites', JSON.stringify(favoritePokemons));
        }
        

        btnFavorite.addEventListener('click', () => {
            heartOutline.classList.toggle('hidden');
            heartFull.classList.toggle('hidden');

            toggleFavorite()
        })
    }

    document.addEventListener('astro:page-load', handlePageLoad)

</script>

<style>
    a{
        @apply hover:underline text-blue-500;
    }

    #btn-favorite{
        @apply hover:animate-pulse;
    }
</style>